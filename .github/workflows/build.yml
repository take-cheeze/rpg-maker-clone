# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - run: git config --global submodule.fetchJobs 4
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: nixbuild/nix-quick-install-action@v29
      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix') }}

      - run: nix develop -c echo test
      - run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install wine32 wine
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
      - run: brew install --cask wine@staging
        if: ${{ startsWith(matrix.os, 'macos') }}

      - name: cache rtp
        uses: actions/cache@v4
        id: rtp-cache
        with:
          path: scripts/2000rtp.zip
          key: game-${{ hashFiles('./scripts/rtp_install.bash') }}

      - name: Download RTP
        run: |
          nix develop -c xvfb-run ./scripts/rtp_install.bash

      - name: pre-commit
        env:
          SKIP: nixfmt
        run: |
          nix develop -c pre-commit run -a
          git diff --exit-code

      - uses: actions/cache@v4
        with:
          path: ~/.ccache ~/Library/Caches/ccache
          key: ${{ runner.os }}-ccache-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-ccache-

      - name: cmake
        run: |
          nix develop -c cmake -S . -B build -GNinja

      - name: build
        run: |
          nix develop -c cmake --build build

      - name: cache test game
        uses: actions/cache@v4
        id: cache
        with:
          path: data
          key: game-${{ hashFiles('./scripts/download-nepheshel.bash') }}

      - name: Download game
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./scripts/download-nepheshel.bash

      - name: test
        run: |
          nix develop -c cmake --build build -t test

  flake:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - run: git config --global submodule.fetchJobs 4
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: nixbuild/nix-quick-install-action@v27
      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix') }}

      - name: Build flake
        run: nix build -L '.?submodules=1#build'
